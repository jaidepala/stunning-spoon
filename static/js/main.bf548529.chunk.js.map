{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","href","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","evt","setState","searcField","target","value","state","searchField","fetch","then","response","json","users","catch","err","console","error","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAKaA,G,MAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,4BACML,EAAMG,QAAQG,MAEpB,2BACI,uBAAGC,KAAM,UAAYP,EAAMG,QAAQK,OAC7BR,EAAMG,QAAQK,WCLnBC,G,MAAW,SAAET,GAEtB,OACI,yBAAKC,UAAU,aAEPD,EAAMU,SAASC,KAAI,SAACR,GAChB,OACI,kBAAC,EAAD,CAAMS,IAAQT,EAAQC,GAAKD,QAAUA,UCXhDU,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAErC,OACI,2BACId,UAAU,SACVe,KAAK,SACLF,YAAcA,EACdG,SAAUF,MC+CPG,G,kBAhDX,aAAe,IAAD,8BAEV,+CAsBJH,aAAe,SAACI,GACZ,EAAKC,SAAS,CACVC,WAAYF,EAAIG,OAAOC,SAtB3B,EAAKC,MAAQ,CACTd,SAAU,GACVe,YAAa,IANP,E,iFAUO,IAAD,OAChBC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEF,EAAKV,SAAS,CACVV,SAAUoB,OAGjBC,OAAM,SAAAC,GACHC,QAAQC,MAAMF,Q,+BAUhB,IAAD,EAE6BG,KAAKX,MAA/Bd,EAFH,EAEGA,SAAUe,EAFb,EAEaA,YAEZW,EAAmB1B,EAAS2B,QAAO,SAAAlC,GAAO,OAAIA,EAAQG,KAAKgC,cAAcC,SAASd,EAAYa,kBAEpG,OACL,yBAAKrC,UAAW,OACH,gDAGA,kBAAC,EAAD,CAAWa,YAAY,kBAAkBC,aAAcoB,KAAKpB,eAC5D,kBAAC,EAAD,CAAUL,SAAU0B,S,GA5ClBI,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.bf548529.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// Style\r\n    import './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\r\n        <h2>\r\n            { props.monster.name }\r\n        </h2>\r\n        <p>\r\n            <a href={\"mailto:\" + props.monster.email}>\r\n                { props.monster.email }\r\n            </a>\r\n        </p>\r\n    </div>\r\n);","import React from 'react';\r\n\r\n// Component\r\n    import { Card } from '../card/card.component';\r\n\r\n// Style\r\n    import './card-list.styles.css';\r\n\r\nexport const CardList = ( props ) => {\r\n\r\n    return (\r\n        <div className=\"card-list\">\r\n            {\r\n                props.monsters.map((monster) => {\r\n                    return ( \r\n                        <Card key = { monster.id } monster={ monster } />\r\n                    );\r\n                })\r\n            } \r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n\r\n    return (            \r\n        <input \r\n            className=\"search\"\r\n            type=\"search\"\r\n            placeholder={ placeholder }\r\n            onChange={handleChange}\r\n        />\r\n    );\r\n};","import React, { Component } from 'react';\n\n// Import Component\n    import { CardList } from './components/card-list/card-list.component';\n    import { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\nclass App extends Component {\n\n    constructor() {\n\n        super();\n\n        this.state = {\n            monsters: [],\n            searchField: ''\n        };\n    };\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => {\n                \n                this.setState({\n                    monsters: users\n                })\n            })\n            .catch(err => {\n                console.error(err)\n            });\n    };\n\n    handleChange = (evt) => {\n        this.setState({\n            searcField: evt.target.value\n        });\n    };\n\n    render() {\n        \n        const { monsters, searchField } = this.state;\n\n        const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n        return ( \n\t\t\t<div className =\"App\"> \n                <h1>\n                    Monsters Rolodex\n                </h1>\n                <SearchBox placeholder=\"search monsters\" handleChange={this.handleChange} />\n                <CardList monsters={filteredMonsters} />\n\t\t\t</div>\n        );\n    };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}